Thought about bouncing snake in pentagon for 38 seconds
Below is a simple example of how you could implement an animated “snake” bouncing around inside a rotating pentagon using Pygame. The code does the following:

Creates a window with Pygame.
Draws a regular pentagon in the center that rotates slowly over time.
Maintains a snake (represented by a list of segment positions) moving around.
Checks collisions of the snake’s head with the pentagon boundary and bounces (reflects) the snake’s velocity when it hits an edge.
The body segments follow the head’s position to form a continuous snake shape.
Note:

Collision detection here is implemented by approximating “circle (snake head) vs polygon (pentagon)” collisions. When the head is detected to be outside the pentagon, we do a reflection of the velocity around the nearest pentagon edge.
There are many ways to improve or customize collision detection (e.g., line intersection checks, more robust reflection if the snake can be large, etc.). The implementation below is kept relatively straightforward and self-contained.
This script requires Pygame to be installed: pip install pygame

How this works
Pentagon Rotation

We keep a global pentagon_angle that is incremented by ROTATION_SPEED every frame.
Each frame, we compute the pentagon’s vertices by calling create_pentagon_points(…) with the updated angle.
Snake Representation

We store the snake as a list of positions (x, y) (snake_positions) from head (index 0) to tail (last index).
The head moves according to a velocity vector. Each frame, we insert the head’s new position at the front of the list and remove the last element to maintain a fixed length.
Collision and Reflection

We do a simple point-in-polygon test to see if the new head position is inside or outside the pentagon.
If it’s outside, we find the nearest edge of the pentagon to the new head. Then we compute a reflection of the snake’s velocity around the normal of that edge. This effectively “bounces” the snake.
We then recalculate the new head position using this reflected velocity.
Rendering

Each frame, we draw the rotating pentagon and the snake (circles for each segment) onto the window.
You can tune parameters (like SNAKE_SPEED, the body length, rotation speed, etc.) for different effects. This example is meant as a starting point to demonstrate the core logic of:

Polygon rotation
Snake/bouncing entity with reflection off polygon edges
Continuous animation with Pygame
